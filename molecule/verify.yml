---

- hosts: all
  name: 'Verify'
  become: True
  gather_facts: True
  vars:
    __verify_suoders_by_os_family:
      Debian: '/etc/sudoers.d/testinfra'
      OpenBSD: '/etc/doas.conf'

    __verify_ansible_sudo_by_os_family_cmd1:
      Debian: "su -s /bin/bash testinfra -c 'sudo /usr/bin/whoami'"
      OpenBSD: "su -s /bin/ksh testinfra -c 'doas /usr/bin/whoami'"

    __verify_ansible_sudo_by_os_family_cmd2:
      Debian: "su -s /bin/bash testinfra -c 'sudo /bin/ls /root'"
      OpenBSD: "su -s /bin/ksh testinfra -c 'doas /bin/ls /root'"

    __verify_ansible_sudo_by_os_family_cmd3:
      Debian: "su -s /bin/bash molecule -c 'sudo /usr/bin/whoami'"
      OpenBSD: "su -s /bin/ksh molecule -c 'doas /usr/bin/whoami'"

    __verify_ansible_sudo_by_os_family_cmd4:
      Debian: "su -s /bin/bash molecule -c 'sudo /bin/ls /root'"
      OpenBSD: "su -s /bin/ksh molecule -c 'doas /bin/ls /root'"

  tasks:
    - name: 'stat the sudoers file'
      stat:
        path: "{{ __verify_suoders_by_os_family[ ansible_facts['os_family'] ] }}"
      register: __verify_file

    - name: 'Check the sudoers file exists'
      assert:
        that:
          - __verify_file.stat.exists

    - name: 'Verify privesc case1'
      shell: "{{ __verify_ansible_sudo_by_os_family_cmd1[ ansible_facts['os_family'] ] }}"
      register: __verify_cmd
      failed_when: __verify_cmd.stdout != 'root'

    - name: 'Verify privesc exec case1'
      shell: "{{ __verify_ansible_sudo_by_os_family_cmd2[ ansible_facts['os_family'] ] }}"
      register: __verify_cmd
      failed_when: __verify_cmd.rc != 0

    - name: 'Verify privesc case2'
      shell: "{{ __verify_ansible_sudo_by_os_family_cmd3[ ansible_facts['os_family'] ] }}"
      register: __verify_cmd
      failed_when: __verify_cmd.stdout != 'root'

    - name: 'Verify privesc exec case2'
      shell: "{{ __verify_ansible_sudo_by_os_family_cmd4[ ansible_facts['os_family'] ] }}"
      register: __verify_cmd
      failed_when: __verify_cmd.rc != 0
